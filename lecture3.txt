Arithmetic and Logic Unit (ALU)

	• It can be performed by ALU but its very slow
	• Operates over integers
	• Floating point unit (FPU)
		○ Deals with real numbers

2 - representation in detail
	• Sign-magnitude
	• Two's complement
Other
	• Biased (binary, excess code)
	• One's complement
	• Base -2

Sign-magnitude (S-M)
	• The left most bit represents the bit of the sign
		○ 0 means positive
		○ 1 means negative

Use the 8-bit format
〖−6〗_10  =  10000110
123_10  =  01111011

Range extension S-M
	• Range of numbers that can be expressed is extended by increasing the bit length
	• Problems
		○ Addition
		○ Subtraction

One's complement
	• Negative notation of an integer id obtained by inverting all digits
	• 0 became 1 and vise versa
	• Problems
		○ 2 zeros
		○ Addition and subtraction require to add any carry back
		
General representation of TC
A+B = 0

〖−2〗^(n−1) a_(n−1)+∑24_0^(n−2)▒〖2^i a_i 〗−2^(n−1) ¯(a_(n−1) )+1+∑24_0^(n−2)▒2^i  ¯(a_i )=0

−∑24_0^(n−2)▒〖2^i a_i−1+∑24_0^(n−2)▒〖2^i (a_i+¯(a_i ))−∑24_0^(n−2)▒〖2^i ¯(a_i )〗−1+1=0〗〗

−∑24_0^(n−2)▒〖2^i (a_i+¯(a_i ))+∑24_0^(n−2)▒〖2^i−1=0〗〗
  00000001   1
  11111110  -1
+00000010   2
100000000
+                1
  00000001   1

Negation special case (1)
	• Carry out bite is ignored so -0 = 0 
Negation special case (2)
	• -(-128) = - 128, we need to monitor the MSB
	• It should change during negation

Overflow rule 
	• If two numbers are added and they are both positive or both negative then overflow occurs if and only if the result has the opposite sign
